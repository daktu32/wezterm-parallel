# director-instructions.yaml
# ディレクター Claude への指示書テンプレート

project_metadata:
  name: "todo-app-demo"
  type: "web_application"
  description: "シンプルなToDoアプリケーション"
  estimated_duration: "2-3 hours"
  complexity: "medium"

architecture:
  frontend:
    tech_stack:
      - "React 18"
      - "TypeScript 4.9+"
      - "Tailwind CSS 3.x"
      - "Vite (Build Tool)"
    main_components:
      - "TodoList: メインリスト表示"
      - "TodoItem: 個別アイテム"
      - "AddTodo: 新規追加フォーム"
      - "Filter: フィルタリング機能"
    api_integration:
      base_url: "http://localhost:3001/api"
      endpoints:
        - "GET /todos"
        - "POST /todos"
        - "PUT /todos/:id"
        - "DELETE /todos/:id"
    
  backend:
    tech_stack:
      - "Node.js 18+"
      - "Express.js 4.x"
      - "SQLite 3"
      - "CORS middleware"
    endpoints:
      - path: "/api/todos"
        method: "GET"
        description: "全TODOリスト取得"
      - path: "/api/todos"
        method: "POST"
        description: "新規TODO作成"
      - path: "/api/todos/:id"
        method: "PUT"
        description: "TODO更新"
      - path: "/api/todos/:id"
        method: "DELETE"
        description: "TODO削除"
    data_model:
      todo_schema:
        id: "INTEGER PRIMARY KEY"
        text: "TEXT NOT NULL"
        completed: "BOOLEAN DEFAULT FALSE"
        created_at: "DATETIME DEFAULT CURRENT_TIMESTAMP"
        updated_at: "DATETIME DEFAULT CURRENT_TIMESTAMP"
  
  testing:
    unit_tests:
      frontend: "Jest + React Testing Library"
      backend: "Jest + Supertest"
    integration_tests: "Cypress (E2E)"
    coverage_target: "80%"

task_distribution:
  director:
    responsibilities:
      - "プロジェクト全体の設計・調整"
      - "各エンジニアへのタスク分散"
      - "進捗監視・品質管理"
      - "最終統合・報告"
    tasks:
      - "アーキテクチャ設計書作成"
      - "API仕様書作成"
      - "タスク優先度付け・スケジューリング"
      - "定期的な進捗確認・調整"
      - "最終統合テスト・品質確認"

  frontend:
    responsibilities:
      - "React TypeScript アプリケーション開発"
      - "ユーザーインターフェース実装"
      - "API クライアント実装"
    priority_tasks:
      - "Vite + React + TypeScript プロジェクト初期化"
      - "Tailwind CSS セットアップ・基本スタイル"
      - "TodoList メインコンポーネント実装"
      - "AddTodo 新規追加フォーム実装"
      - "API クライアント (fetch/axios) 実装"
    deliverables:
      - "src/components/TodoList.tsx"
      - "src/components/TodoItem.tsx"
      - "src/components/AddTodo.tsx"
      - "src/api/todoClient.ts"
      - "src/App.tsx"

  backend:
    responsibilities:
      - "Node.js Express API サーバー開発"
      - "SQLite データベース設計・実装"
      - "CRUD エンドポイント実装"
    priority_tasks:
      - "Express プロジェクト初期化・基本設定"
      - "SQLite データベース設計・初期化スクリプト"
      - "CRUD エンドポイント実装"
      - "CORS・エラーハンドリング・バリデーション"
      - "API ドキュメント作成"
    deliverables:
      - "server.js (メインサーバーファイル)"
      - "routes/todos.js (TODOルート)"
      - "db/init.sql (データベース初期化)"
      - "middleware/errorHandler.js"
      - "package.json (依存関係)"

  tester:
    responsibilities:
      - "テスト環境構築"
      - "単体テスト・統合テスト実装"
      - "品質確認・バグレポート"
    priority_tasks:
      - "Jest + React Testing Library 環境構築"
      - "Supertest API テスト環境構築"
      - "フロントエンドコンポーネントテスト実装"
      - "バックエンド API エンドポイントテスト実装"
      - "E2E テストシナリオ作成"
    deliverables:
      - "tests/frontend/TodoList.test.tsx"
      - "tests/frontend/AddTodo.test.tsx"
      - "tests/backend/todos.test.js"
      - "tests/e2e/todo-app.spec.js"
      - "jest.config.js"

coordination_protocol:
  communication:
    status_updates: "30分間隔"
    blocker_escalation: "即座にディレクターに報告"
    code_review: "実装完了時にディレクターがレビュー"
  
  milestones:
    - name: "環境セットアップ完了"
      deadline: "30分"
      criteria: "各チームのプロジェクト初期化完了"
    - name: "基本機能実装完了"
      deadline: "90分"
      criteria: "CRUD操作の基本実装完了"
    - name: "統合テスト完了"
      deadline: "120分"
      criteria: "フロントエンド・バックエンド連携確認"
    - name: "プロジェクト完成"
      deadline: "150分"
      criteria: "全機能動作確認・テスト通過"

quality_standards:
  code_quality:
    - "TypeScript 型安全性"
    - "ESLint/Prettier 準拠"
    - "コンポーネント再利用性"
    - "適切なエラーハンドリング"
  
  testing:
    - "主要機能の単体テストカバレッジ 80%+"
    - "API エンドポイントの動作確認"
    - "E2E テストシナリオの実行"
  
  documentation:
    - "README.md (セットアップ・使用方法)"
    - "API ドキュメント"
    - "コンポーネント仕様書"

success_criteria:
  functional:
    - "TODOの追加・表示・更新・削除が動作"
    - "フロントエンド・バックエンドの正常な通信"
    - "レスポンシブなユーザーインターフェース"
  
  technical:
    - "エラーの無いビルド・テスト実行"
    - "適切なコード構造・可読性"
    - "パフォーマンスの基本最適化"
  
  process:
    - "計画通りの並行開発実行"
    - "効果的なプロセス間協調"
    - "品質確認・統合プロセス完了"