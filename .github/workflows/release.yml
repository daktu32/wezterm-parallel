name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: WezTerm Parallel ${{ steps.version.outputs.version }}
        body: |
          ## WezTerm Multi-Process Development Framework ${{ steps.version.outputs.version }}
          
          ### 主な変更点
          - 自動生成されたリリースノート
          - 詳細は CHANGELOG.md をご覧ください
          
          ### ダウンロード
          - Linux: `wezterm-parallel-linux-amd64`
          - macOS: `wezterm-parallel-darwin-amd64`
          - Windows: `wezterm-parallel-windows-amd64.exe`
          
          ### インストール方法
          ```bash
          # Linux/macOS
          chmod +x wezterm-parallel-*
          ./wezterm-parallel-* --help
          
          # または cargo からインストール
          cargo install --git https://github.com/daktu32/wezterm-parallel
          ```
          
          ### システム要件
          - Rust 1.70以上
          - WezTerm最新版
          - Unix系OS (Linux/macOS) または Windows
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: wezterm-parallel
            asset_name: wezterm-parallel-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: wezterm-parallel
            asset_name: wezterm-parallel-darwin-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: wezterm-parallel.exe
            asset_name: wezterm-parallel-windows-amd64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary for upload
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp ${{ matrix.binary_name }} ../${{ matrix.asset_name }}
        else
          cp ${{ matrix.binary_name }} ../${{ matrix.asset_name }}
          strip ../${{ matrix.asset_name }}
        fi
        cd ..
        ls -la ${{ matrix.asset_name }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true